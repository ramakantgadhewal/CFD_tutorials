/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.2                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     fireFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         900;

deltaT          0.03;

writeControl    adjustableRunTime;

writeInterval   100;

purgeWrite      0;

writeFormat     ascii;

writePrecision  12;

writeCompression on;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.9;

maxDi           0.25;

maxDeltaT       0.01;


functions
{
/*
    write
    {
        type            writeRegisteredObject;

        // Where to load it from
        functionObjectLibs ("libIOFunctionObjects.so");

        // Execute upon options:
        //  timeStep
        //  outputTime
        //  adjustableTime
        //  runTime
        //  clockTime
        //  cpuTime
        outputControl   adjustableTime;

        // Objects (fields or lagrangian fields in any of the clouds)
        // to write every outputTime
        objectNames    (T U dQ);

        exclusiveWriting     false;

        // Interval of time (sec) to write down(
        writeInterval   0.1; //(adjustableTime, runTime, clockTime, cpuTime)
    }

    HRR
    {
        type               cellSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled            true;
        outputControl      runTime; //timeStep;  //outputTime;
        writeInterval      0.1;
        log                false;     
        valueOutput        false;
        source             all;       //cellZone;
        sourceName         c0;
        operation          volIntegrate;
        fields
        (
            dQ
        );
    }

    HRR_panel
    {
        type               faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled            true;
        outputControl      runTime; //outputTime;  
        writeInterval      0.1;
        log                false;
        valueOutput        false;
        source             patch;
        sourceName         region0_to_panelRegion_panel;
        operation          sum;
        fields
        (
            phi
            HRR_fu
        );
    }

    HRR_burner
    {
        type               faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled            true;
        outputControl      runTime; //outputTime; 
        writeInterval      0.1;
        log                false;
        valueOutput        false;
        source             patch;
        sourceName         burner;
        operation          sum;
        fields
        (
            phi
            HRR_fu
        );
    }

    Temperatures_PanelBig
    {
        type               probes;
        functionObjectLibs ("libsampling.so");
        outputControl      runTime; //outputTime;
        writeInterval      0.1;
        region             panelRegion;
        probeLocations
        (
            ( -0.001 0.2 0.05 ) //Start 1st row measurements
            ( -0.001 0.2 0.15 )
            ( -0.001 0.2 0.3 )
            ( -0.001 0.2 0.5 )
            ( -0.001 0.2 0.75 )

            ( -0.002 0.2 0.05 )
            ( -0.002 0.2 0.15 )
            ( -0.002 0.2 0.3 )

            ( -0.0182 0.2 0.05 )
            ( -0.0182 0.2 0.15 )
            ( -0.0182 0.2 0.3 )
            ( -0.0182 0.2 0.5 )
            ( -0.0182 0.2 0.75 ) //End 1st row measurements

            ( -0.001 0.6 0.05 ) //Start 3rd row measurements
            ( -0.001 0.6 0.15 )
            ( -0.001 0.6 0.3 )
            ( -0.001 0.6 0.5 )

            ( -0.002 0.6 0.05 )
            ( -0.002 0.6 0.15 )
            ( -0.002 0.6 0.3 )

            ( -0.0182 0.6 0.05 )
            ( -0.0182 0.6 0.15 )
            ( -0.0182 0.6 0.3 ) //End 3rd row measurements

            ( -0.001 1.0 0.05 ) //Start 5th row measurements
            ( -0.001 1.0 0.15 )
            ( -0.001 1.0 0.3 )
            ( -0.001 1.0 0.5 )

            ( -0.002 1.0 0.05 )
            ( -0.002 1.0 0.15 )
            ( -0.002 1.0 0.3 )

            ( -0.0182 1.0 0.05 )
            ( -0.0182 1.0 0.15 )
            ( -0.0182 1.0 0.3 ) //End 5th row measurements

            ( -0.001 1.4 0.05 ) //Start 7th row measurements
            ( -0.001 1.4 0.15 )
            ( -0.001 1.4 0.3 )
            ( -0.001 1.4 0.5 )
            ( -0.001 1.4 0.75 )

            ( -0.002 1.4 0.05 )
            ( -0.002 1.4 0.15 )
            ( -0.002 1.4 0.3 )

            ( -0.0182 1.4 0.05 )
            ( -0.0182 1.4 0.15 )
            ( -0.0182 1.4 0.3 )
            ( -0.0182 1.4 0.5 )
            ( -0.0182 1.4 0.75 ) //End 7th row measurements
        );
        fields
        (
            T
        );
    }

    heatFluxes
    {
        type               patchProbes;
        functionObjectLibs ("libsampling.so");
        outputControl      runTime; //outputTime;
        writeInterval      0.1;
        source             patch;
        patchName          region0_to_panelRegion_panel;
        probeLocations
        (
            ( 0.0 0.21 0.08 )  //Flux sensor 1
            ( 0.0 0.35 0.2 )   //Flux sensor 2
            ( 0.0 0.80 0.08 )  //Flux sensor 3
        );
        fields
        (
            Qin
            Qr
            Qem
            convectiveHeatFlux_L
            convectiveHeatFlux_T
        );
    }

    massLossRate
    {
        type               faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled            true;
        region             panelRegion;
        outputControl      runTime; //outputTime;  
        writeInterval      0.1;
        log                false;
        valueOutput        false;
        source             patch;
        sourceName         region0_to_panelRegion_panel;
        surfaceFormat      vtk; 
        operation          sum;
        fields
        (
            phiGas
        );
    }

    surfaceSampling
    {
        type surfaces;

        functionObjectLibs ("libsampling.so");
        enabled             true;
        outputControl       runTime; //adjustableTime; //outputTime;
        writeInterval       1.0;
        interpolationScheme cellPoint;
        surfaceFormat vtk;

        // Fields to be sampled
        fields
        (
            T
        );

        surfaces
        (
            flame
            {
            // Iso surface for constant values.
            // Triangles guaranteed not to cross cells.
            type            isoSurfaceCell; //isoSurface;
            isoField        ft;
            isoValue        0.0602;
            interpolate     true; //false;
            regularise      false;          // do not simplify  // more stable
            // mergeTol     1e-10;          // Optional: fraction of mesh bounding box
                                            // to merge points (default=1e-6)
            }
        );
    }
*/
}

// ************************************************************************* //
